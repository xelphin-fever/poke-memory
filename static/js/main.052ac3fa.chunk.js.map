{"version":3,"sources":["components/ScoreBoard.js","components/Card.js","components/Deck.js","components/MessageBoard.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreBoard","props","console","log","className","scoreArray","currentScore","topScore","gamesPlayed","gamesWon","Card","useState","imgSrc","setImgSrc","name","setName","useEffect","isCancelled","a","fetch","pokeIndex","response","json","data","sprites","front_default","pokemon","first","toUpperCase","slice","fetchImage","onClick","handlerClicked","data-index","src","alt","Deck","deckLength","Array","fill","deck","setDeck","playing","setPlaying","currentCards","setCurrentCards","score","setScore","incScore","updateScore","chooseCards","notChosen","myDeck","deckCopy","map","chosen","index","filter","length","Math","floor","random","pickFromUnChosen","arrayCollect","card","option","toBeCards","includes","pickValidOption","push","cardClicked","event","currentTarget","getAttribute","gameResult","updateDeck","MessageBoard","title","reset","type","id","value","min","max","placeholder","onChange","document","querySelector","App","setScoreArray","gameReset","setGameReset","gameWin","setGameWin","setDeckLength","scoreCopy","result","setTimeout","input","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.052ac3fa.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/scoreBoard.css';\n\nconst ScoreBoard = (props) => {\n  console.log('Score Board Rendered');\n\n  return (\n    <div className=\"scoreBoard\">\n      {/* prettier-ignore */}\n      <h3> Current Score: <span>{props.scoreArray.currentScore}</span></h3>\n      <h3> Top Score: <span>{props.scoreArray.topScore}</span></h3>\n      <h3> Games Played: <span>{props.scoreArray.gamesPlayed}</span></h3>\n      <h3> Games Won: <span>{props.scoreArray.gamesWon}</span></h3>\n    </div>\n  );\n  \n};\n\nexport default ScoreBoard;\n","import React, { useState, useEffect } from 'react';\nimport '../stylesheets/card.css';\n\nconst Card = (props) => {\n  // const [pokeIndex, setPokeIndex] = useState(props.index);\n  let [imgSrc, setImgSrc] = useState('');\n  let [name, setName] = useState('');\n\n  useEffect(() => {\n    let isCancelled = false;\n    async function fetchImage() {\n      let response = await fetch(`https://pokeapi.co/api/v2/pokemon-form/${props.pokeIndex}/`);\n      let data = await response.json();\n      if (isCancelled === false) {\n        setImgSrc(data.sprites.front_default);\n        let name = data.pokemon.name;\n        let first = name[0].toUpperCase();\n        name = first + name.slice(1);\n        setName(name);\n      }\n    }\n    fetchImage();\n    return () => {\n      isCancelled = true;\n    };\n  }, [props]);\n\n  return (\n    <div className=\"card-div\" onClick={props.handlerClicked} data-index={props.pokeIndex}>\n      <img className=\"card-img\" src={imgSrc} alt=\"Pokemon Sprite\" />\n      <h3 className=\"card-name\">{name}</h3>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport '../stylesheets/deck.css';\n\nconst Deck = (props) => {\n  console.log('Render Deck');\n  console.log('length of deck is:', props.deckLength);\n  const deckLength = props.deckLength;\n  const [deck, setDeck] = useState(new Array(deckLength).fill(0)); // Remember 0 index invalid for API\n  const [playing, setPlaying] = useState(true);\n  const [currentCards, setCurrentCards] = useState([1, 2, 3]); // 1,2,3...26\n  const [score, setScore] = useState(0);\n  const incScore = () => {\n    setScore(score + 1);\n    props.updateScore(score + 1);\n  };\n\n  const pickFromUnChosen = (myDeck) => {\n    // Return Random Index from Deck : Has to be UnChosen ( == 0)\n    let deckCopy = [...myDeck];\n    deckCopy = deckCopy.map((chosen, index) => {\n      if (chosen === 0) {\n        return index + 1; // +1 : because 0 index invalid\n      }\n      return -1;\n    });\n    console.log('index of UnChosens: ', deckCopy);\n    deckCopy = deckCopy.filter((index) => index !== -1);\n    console.log('index of UnChosens: ', deckCopy);\n    if (deckCopy.length > 0) {\n      return deckCopy[Math.floor(Math.random() * deckCopy.length)];\n    }\n    return Math.floor(Math.random() * deckCopy.length) + 1;\n  };\n\n  const pickValidOption = (card, toBeCards) => {\n    if (card !== -1) {\n      console.log('returning valid: ', card);\n      return card;\n    }\n    let chosen = 0;\n    while (chosen === 0 || toBeCards.includes(chosen)) {\n      chosen = Math.floor(Math.random() * deckLength) + 1;\n    }\n    console.log('returning chosen: ', chosen);\n    return chosen;\n  };\n\n  useEffect(() => {\n    let chooseCards = [-1, -1, -1];\n    const notChosen = pickFromUnChosen(deck);\n    const placeNotChosen = Math.floor(Math.random() * 3);\n    chooseCards[placeNotChosen] = notChosen;\n    console.log('current cards one unChosen placed:', chooseCards);\n    let arrayCollect = [notChosen];\n    chooseCards = chooseCards.map((card) => {\n      let option = pickValidOption(card, arrayCollect);\n      arrayCollect.push(option);\n      return option;\n    });\n    setCurrentCards(chooseCards);\n  }, [deck]);\n\n  const updateDeck = (pokeIndex) => {\n    let deckCopy = [...deck];\n    deckCopy[pokeIndex - 1] = 1;\n    setDeck(deckCopy);\n    console.log(deck);\n  };\n\n  useEffect(() => console.log('useEffect() current cards: ', currentCards));\n\n  const cardClicked = (event) => {\n    console.log('score', score);\n    if (playing === true) {\n      const pokeIndex = event.currentTarget.getAttribute('data-index');\n      console.log('clicked card', pokeIndex);\n      console.log(event.currentTarget);\n      if (deck[pokeIndex - 1] === 1) {\n        setPlaying(false);\n        console.log('Game Over');\n        console.log('score', score + 1);\n        props.gameResult('lose');\n      } else if (score === deckLength - 1) {\n        incScore();\n        setPlaying(false);\n        console.log('You Won!');\n        console.log('score', score + 1);\n        props.gameResult('win');\n      } else {\n        incScore();\n        updateDeck(pokeIndex);\n      }\n    }\n  };\n\n  return (\n    <div className=\"deck-div\">\n      {currentCards.map((card) => {\n        return <Card pokeIndex={card} handlerClicked={cardClicked} key={card} />;\n      })}\n    </div>\n  );\n};\n\nexport default Deck;\n","import React from 'react';\nimport '../stylesheets/messageBoard.css';\n\nconst MessageBoard = (props) => {\n  const setDeck = () => {\n    let input = document.querySelector('#input-deckLength');\n    let value = input.value;\n    if (value > 14 && value < 51) {\n      props.updateDeck(value);\n    }\n  };\n\n  return (\n    <div className=\"message-div\">\n      <h2 className=\"message-title\">{props.title}</h2>\n      <h4 className=\"message-score\">You got {props.score} Pokemon!</h4>\n      <button onClick={props.reset} className=\"reset-btn\">\n        Reset Game\n      </button>\n      <div className=\"message-input-div\">\n        <h5>Change Amount of Cards</h5>\n        <input\n          type=\"number\"\n          id=\"input-deckLength\"\n          value={props.deckLength}\n          min=\"15\"\n          max=\"50\"\n          placeholder={props.deckLength}\n          onChange={setDeck}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MessageBoard;\n","import React, { useState } from 'react';\nimport './App.css';\nimport ScoreBoard from './components/ScoreBoard';\nimport Deck from './components/Deck';\nimport MessageBoard from './components/MessageBoard';\n\nconst App = (props) => {\n  const [scoreArray, setScoreArray] = useState({\n    currentScore: 0,\n    topScore: 0,\n    gamesPlayed: 0,\n    gamesWon: 0,\n  });\n  const [gameReset, setGameReset] = useState(false);\n  const [gameWin, setGameWin] = useState(false);\n  const [deckLength, setDeckLength] = useState(20);\n\n  const setCurrentScore = (score) => {\n    let scoreCopy = { ...scoreArray };\n    scoreCopy.currentScore = score;\n    if (score > scoreArray.topScore) {\n      scoreCopy.topScore = score;\n    }\n    setScoreArray(scoreCopy);\n    console.log('scoreBoard: ', scoreArray);\n  };\n\n  const setGameResults = (result) => {\n    let scoreCopy = { ...scoreArray };\n    if (result === 'win') {\n      scoreCopy.gamesWon = scoreArray.gamesWon + 1;\n      scoreCopy.currentScore = scoreArray.currentScore + 1;\n      scoreCopy.topScore = scoreArray.topScore + 1;\n      setGameWin(true);\n    }\n    scoreCopy.gamesPlayed = scoreArray.gamesPlayed + 1;\n    setScoreArray(scoreCopy);\n    console.log('scoreBoard: ', scoreArray);\n    function wait() {\n      setGameReset(true);\n    }\n    setTimeout(wait, 2000);\n  };\n\n  const reset = () => {\n    function wait() {\n      setGameReset(false);\n      setGameWin(false);\n    }\n    setTimeout(wait, 200);\n  };\n\n  const updateDeck = (input) => {\n    setDeckLength(Number(input));\n  };\n\n  return (\n    <div className=\"app\">\n      <ScoreBoard scoreArray={scoreArray} />\n      <div className=\"titleDiv\">\n        <h1 className=\"title\">PokeMemory!</h1>\n        <h4 className=\"subTitle\">Don't Click On The Same Pokemon Twice ;)</h4>\n      </div>\n      {gameReset === false ? (\n        <Deck deckLength={deckLength} updateScore={setCurrentScore} gameResult={setGameResults} />\n      ) : (\n        <MessageBoard\n          title={gameWin ? 'You Won!' : 'Maybe Next Time'}\n          score={scoreArray.currentScore}\n          reset={reset}\n          deckLength={deckLength}\n          updateDeck={updateDeck}\n        />\n      )}\n      <h3 className=\"text-left\">You have {deckLength - scoreArray.currentScore} left</h3>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}